'use client';

import React, { useRef, useMemo, Suspense } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import { OrbitControls, Sphere, Torus, Html } from '@react-three/drei';
import * as THREE from 'three';
import FloatingText from './FloatingText';

// --- Background Component: Cosmic Ocean (Fullscreen) ---
const vertexShader = `
varying vec2 vUv;
void main() {
  vUv = uv;
  // Scale by 1.01 to fix any tiny edge gaps from rounding
  gl_Position = vec4(position.xy * 1.01, 1.0, 1.0);
}`;

const fragmentShader = `
uniform float u_time;
varying vec2 vUv;

float random(vec2 st) {
  return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}

float noise(vec2 st) {
  vec2 i = floor(st);
  vec2 f = fract(st);
  vec2 u = f * f * (3.0 - 2.0 * f);
  return mix(mix(random(i + vec2(0.0, 0.0)), random(i + vec2(1.0, 0.0)), u.x),
             mix(random(i + vec2(0.0, 1.0)), random(i + vec2(1.0, 1.0)), u.x), u.y);
}

void main() {
  vec2 uv = vUv * 2.0 - 1.0;
  float t = u_time * 0.1;

  vec2 p = uv * 3.0 + noise(uv * 2.0 + t) * 0.5;
  float d = length(p) * 0.5;
  float n = noise(p + t);
  d = mix(d, n, 0.5);

  vec3 color1 = vec3(0.0, 0.1, 0.15);
  vec3 color2 = vec3(0.0, 0.6, 0.5);
  vec3 finalColor = mix(color1, color2, smoothstep(0.1, 0.6, d));

  float stars = pow(random(vUv * 1000.0 + t * 0.1), 20.0);
  finalColor += vec3(stars) * 0.5;

  gl_FragColor = vec4(finalColor, 1.0);
}`;

function CosmicOceanBackground() {
  const materialRef = useRef<THREE.ShaderMaterial>(null!);
  const uniforms = useMemo(() => ({ u_time: { value: 0.0 } }), []);

  useFrame(({ clock }) => {
    materialRef.current.uniforms.u_time.value = clock.getElapsedTime();
  });

  return (
    <mesh renderOrder={-1}> {/* Ensure it renders first/behind everything */}
      <planeGeometry args={[2, 2]} />
      <shaderMaterial 
        ref={materialRef} 
        vertexShader={vertexShader} 
        fragmentShader={fragmentShader} 
        uniforms={uniforms} 
        depthTest={false}
      />
    </mesh>
  );
}

// --- Monument Component: Solar System (Wireframe) ---
function Planet({ planetData }: { planetData: any }) {
  const planetRef = useRef<THREE.Group>(null!);
  useFrame(({ clock }) => {
    const t = clock.getElapsedTime() * planetData.speed;
    const x = Math.cos(t) * planetData.orbitalRadius;
    const z = Math.sin(t) * planetData.orbitalRadius;
    planetRef.current.position.set(x, 0, z);
    planetRef.current.rotation.y += 0.01;
  });

  return (
    <group ref={planetRef}>
      <Sphere args={[planetData.size, 16, 16]}>
        <meshBasicMaterial color={planetData.emissive} wireframe />
      </Sphere>
      {planetData.ring && (
        <Torus args={[planetData.ring.radius, planetData.ring.tube, 8, 32]} rotation={[Math.PI / 2, 0, 0]}>
          <meshBasicMaterial color={planetData.ring.color} wireframe />
        </Torus>
      )}
    </group>
  );
}

function SolarSystemMonument() {
  const planets = useMemo(() => [
    { name: 'InnerPlanet', color: '#ff8c00', emissive: '#ff4500', size: 0.3, orbitalRadius: 2.5, speed: 0.8 },
    { name: 'TerraPlanet', color: '#4682b4', emissive: '#61dafb', size: 0.4, orbitalRadius: 4, speed: 0.5 },
    { name: 'RingPlanet', color: '#f0e68c', emissive: '#daa520', size: 0.6, orbitalRadius: 6.5, speed: 0.3, ring: { radius: 1, tube: 0.1, color: '#808080' } },
    { name: 'OuterPlanet', color: '#b0c4de', emissive: '#ffffff', size: 0.35, orbitalRadius: 8.5, speed: 0.2 },
  ], []);

  return (
    <group position={[0, 0, 0]} rotation={[0.2, 0, 0]}>
      {/* Sun */}
      <Sphere args={[1.2, 32, 32]}>
        <meshBasicMaterial color="#ffd700" wireframe />
      </Sphere>
      {/* Planets */}
      {planets.map((p) => <Planet key={p.name} planetData={p} />)}
    </group>
  );
}

// --- Orbiting Domain Name Component (Using HTML) ---
function DomainNameRing() {
  const groupRef = useRef<THREE.Group>(null!);
  const radius = 10;
  const speed = -0.1;

  useFrame(({ clock }) => {
    const t = clock.getElapsedTime() * speed;
    const x = Math.cos(t) * radius;
    const z = Math.sin(t) * radius;
    if (groupRef.current) {
      groupRef.current.position.set(x, 0, z);
    }
  });

  return (
    <group ref={groupRef}>
      <Html center>
        <div
          style={{
            color: '#00ffff',
            textShadow: '0 0 5px #00ffff, 0 0 10px #00ffff, 0 0 20px #00ffff',
            fontFamily: '"Courier New", Courier, monospace',
            fontSize: '1.5rem',
            whiteSpace: 'nowrap',
            pointerEvents: 'none',
          }}
        >
          gomix666.com
        </div>
      </Html>
    </group>
  );
}

// --- Main Exported Component ---
export default function DynamicHomepage() {
  return (
    <div className="fixed top-0 left-0 w-full h-screen -z-10">
      <Canvas camera={{ position: [0, 5, 18], fov: 75 }}>
        <Suspense fallback={null}>
          <ambientLight intensity={0.5} />
          <pointLight color="#ffffff" intensity={1} distance={100} />

          {/* Main Site Title (Using HTML) */}
          <Html position={[0, 2.5, 0]} center>
            <div
              style={{
                color: 'white',
                textShadow: '0 0 8px white, 0 0 15px white',
                fontFamily: '"Courier New", Courier, monospace',
                fontSize: '2.5rem',
                whiteSpace: 'nowrap',
                pointerEvents: 'none',
              }}
            >
              gomix666.com
            </div>
          </Html>

          {/* Floating Text */}
          <Html position={[-18, 10, 0]}>
            <FloatingText text={`AI Music Creator
Ethnic Trance
Experimental Electronic

Shamanic Drive
by gomix666

Ableton Live
Max for Live
Midjourney
ChatGPT
Suno
Stable Audio`} />
          </Html>

          <SolarSystemMonument />
          <DomainNameRing />
          <CosmicOceanBackground />
        </Suspense>
        <OrbitControls enableZoom={false} enablePan={false} autoRotate autoRotateSpeed={0.05} minDistance={10} maxDistance={30} minPolarAngle={Math.PI / 3} maxPolarAngle={Math.PI * 2 / 3} />
      </Canvas>
    </div>
  );
}
